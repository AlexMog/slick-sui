#summary how to create your own skins.

= Introduction =

Skins are a new feature in SUI which enable you to use custom shapes and styles on your components. Skins can be used to change things such as default check box images, component shapes and component fonts. Skins only focus on rendering the "base" of a component. The text and image rendering is handled in the component classes, not in the skin or UI classes. (subject to change)

When creating custom skins, it's good practice to implement theme support. Skins should try to follow SuiTheme's general guidelines for which colours to use where.

There are a few ways to give your components custom rendering. For now I'll discuss Subclassing, Component UI and Skin Changes.


= Subclassing = 

Just like in the earlier versions of SUI, you can subclass components and override their render methods. However, component rendering has changed slightly to make the system easier to work with. When rendering, the `renderSkin(GUIContext, Graphics, SuiTheme)` method is called prior to rendering the component tree (`renderComponent`, `renderBorder`, and `renderChildren`).

Here's how one would extend a component to create a custom look. This example will render a linear gradient using the current theme's colours. 
{{{
public class MyButton extends SuiButton {

    //set up a "dummy" fill which we can reuse for this component
    private GradientFill grad = new GradientFill(0,0,Color.white,0,0,Color.white);

    //set up a "dummy" rectangle which we can reuse for this component
    private Rectangle rect = new Rectangle(0f,0f,0f,0f);


    //called before renderComponent
    //only called if isSkinEnabled() returns true
    public void renderSkin(GUIContext c, Graphics g, SuiTheme t) {
        //match the rectangle to this component
        rect.setX(this.getAbsoluteX());
        rect.setY(this.getAbsoluteY());
        rect.setWidth(this.getWidth());
        rect.setHeight(this.getHeight());

        //set up our gradient based on size and theme
        grad.setStartColor(t.getPrimary1());
        grad.setEndColor(t.getSecondary2());

        //horizontal linear gradient
        float midpoint = getWidth()/2.0f;
        grad.setStart(-midpoint, 0);
        grad.setEnd(midpoint, 0);

        //render
        g.fill(rect, grad);
    }
}
}}}


= Individual Component UI =

Instead of having to deal with subclasses, one may wish to develop a UI delegate for use on individual components. For example:

{{{
        ...
        SuiButton button1 = new SuiButton("Custom Skin");
        SuiButton button2 = new SuiButton("Normal Skin");

        button1.setUI(myButtonUI);
}}}



*... more to come*