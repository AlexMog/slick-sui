#using skins and themes.

=Introduction=
This tutorial will discuss how to create a custom skin for SUI, and also how to implement your
own color themes.

==Skins==
Skins are pluggable designs and "looks" for the GUI system. If you've used Swing, you may be familiar
with the Pluggable Look And Feel. Skinning SUI is similar, but more geared towards _simplicity_ and use in 
games.

*Changing the Skin*
When you use `Sui.setSkin()` to change the skin, this will only affect components made thereafter. If you wish
to update the appearance of already-existing components, you must update those components:
{{{ 
   //sets the skin and updates the display
  MySkin skin = new MySkin();
  Sui.setSkin(skin);
  Sui.updateComponentTreeSkin(display); //<-- updates the skin
}}}

==Themes==
Color themes hold the basic colors for a skin. Not all skins are expected to support themes, and skins may differ
on how exactly each color is used.

*Changing the Theme*
Instead of updating the skin, where each component appearance is reverted to the "skin default", we
instead only wish to re-install the appearance so that the colours can be adjusted. This is done through
the following:
{{{
   //sets the skin and updates the display
  MyTheme theme = new MyTheme();
  Sui.setTheme(theme);
  Sui.updateComponentTreeTheme(display); //<-- updates the theme
}}}

==Understanding Appearances==
The `SuiComponent.updateAppearance` method is called when a component is first created. When called, the component
sets up the "skin default" appearance. In other words, the component reverts to the default appearance defined by
the current skin. For example, SuiButton overrides the method like so:
{{{
     public void updateAppearance() {
        setAppearance(Sui.getSkin().getButtonAppearance(this));
    }
}}}

And likewise on other components, such as SuiLabel:
{{{ 
     public void updateAppearance() {
        setAppearance(Sui.getSkin().getLabelAppearance(this));
    }
}}}




=Your First Skin=

==Implementing SuiSkin==
The first step to creating your own skin is to write a `SuiSkin` implementation. Before we start, let's take a look at
how the interface works.

The `install` and `uninstall` methods are used when the skin is changed. When we use `Sui.setSkin` to set a new 
skin, the old skin is uninstalled and the new skin is installed. This is where we will set up our resources (such
as fonts and images). It's recommended that you cache the resources so that they are only loaded once.
{{{
     public void install() throws SlickException;
    public void uninstall() throws SlickException;
}}}

The next two are simple: the skin name (eg: "CoolSkin") and whether or not it supports color themes.
{{{
     public String getName();
    public boolean isThemeable();
}}}

The next bit looks a bit daunting, but it's not too tough once you get the gist of it. This is where components
will retrieve the appearance used for rendering, updating, etc. 
{{{
     public ComponentAppearance getContainerAppearance(SuiContainer comp);
    public ComponentAppearance getCheckBoxAppearance(SuiCheckBox comp);
    public ComponentAppearance getButtonAppearance(SuiButton comp);
    public ComponentAppearance getToolTipAppearance(SuiToolTip comp);
    public ComponentAppearance getToggleButtonAppearance(SuiToggleButton comp);
    public ComponentAppearance getLabelAppearance(SuiLabel comp);
    public ComponentAppearance getTextFieldAppearance(SuiTextField comp);
    public WindowAppearance    getWindowAppearance(SuiWindow comp);
    public ScrollBarAppearance getScrollBarAppearance(SuiScrollBar comp); 
    public ComponentAppearance getScrollPaneAppearance(SuiScrollPane comp);
    public SliderAppearance    getSliderAppearance(SuiSlider comp);
}}}